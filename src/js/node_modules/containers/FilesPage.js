import React from 'react';
import Relay from 'react-relay';
import { compose } from 'recompose';
import { createContainer } from 'recompose-relay';

import CasesAggregations from 'containers/CasesAggregations';
import FilesAggregations from 'containers/FilesAggregations';
import FileTable from 'containers/FileTable';

type Props = {
  viewer: {
    cases: {
      aggregations: Object
    },
    files: {
      aggregations: Object,
      hits: []
    }
  }
}

const FilesPage = (props: Props) => (
  <div>
    <CasesAggregations aggregations={props.viewer.cases.aggregations} />
    <FilesAggregations aggregations={props.viewer.files.aggregations} />
    <FileTable hits={props.viewer.files.hits} />
  </div>
);

const FilesPageQuery = {
  initialVariables: {
    first: 20,
    offset: 0,
    filters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        cases {
          aggregations(filters: $filters) {
            ${CasesAggregations.getFragment('aggregations')}
          }
        }
        files {
          aggregations(filters: $filters) {
            ${FilesAggregations.getFragment('aggregations')}
          }
          hits(first: $first offset: $offset, filters: $filters) {
            ${FileTable.getFragment('hits')}
          }
        }
      }
    `,
  },
};

export default compose(
  createContainer(FilesPageQuery)
)(FilesPage);
