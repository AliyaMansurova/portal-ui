/* @flow */

import '@ncigdc/theme/global.css';

import React from 'react';
import Relay from 'react-relay';
import Match from 'react-router/Match';
import { Provider } from 'react-redux';

import setupStore from '@ncigdc/dux';

import RepositoryRoute from '@ncigdc/routes/RepositoryRoute';
import CohortRoute from '@ncigdc/routes/CohortRoute';
import ProjectsRoute from '@ncigdc/routes/ProjectsRoute';
import AnnotationsRoute from '@ncigdc/routes/AnnotationsRoute';
import ProjectRoute from '@ncigdc/routes/ProjectRoute';
import FileRoute from '@ncigdc/routes/FileRoute';
import CaseRoute from '@ncigdc/routes/CaseRoute';
import AnnotationRoute from '@ncigdc/routes/AnnotationRoute';
import CartRoute from '@ncigdc/routes/CartRoute';

import Home from '@ncigdc/components/Home';
import Header from '@ncigdc/components/Header';
import Footer from '@ncigdc/components/Footer';
import SmartSearch from '@ncigdc/components/SmartSearch';
import NotificationContainer from '@ncigdc/components/NotificationContainer';

const store = setupStore({
  persistConfig: {
    keyPrefix: 'ncigdcActive',
  },
});

const PortalComponent = () => (
  <Provider store={store}>
    <div style={{ position: 'relative', minHeight: '100vh' }}>
      <Header />
      <div style={{ padding: '91px 0 120px 0' }}>
        <Match exactly pattern="/" component={Home} />
        <Match exactly pattern="/cart" component={CartRoute} />
        <Match exactly pattern="/repository" component={RepositoryRoute} />
        <Match exactly pattern="/cohort" component={CohortRoute} />
        <Match exactly pattern="/projects" component={ProjectsRoute} />
        <Match exactly pattern="/annotations" component={AnnotationsRoute} />
        <Match exactly pattern="/query" component={SmartSearch} />
        <Match pattern="/projects/:id" component={ProjectRoute} />
        <Match pattern="/files/:id" component={FileRoute} />
        <Match pattern="/cases/:id" component={CaseRoute} />
        <Match pattern="/annotations/:id" component={AnnotationRoute} />
        <Match pattern="/gene/:id" component={ProjectRoute} />
        <Match pattern="/mutation/:id" component={ProjectRoute} />
      </div>
      <Footer />

      <NotificationContainer />
    </div>
  </Provider>
);

const PortalQuery = {
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        summary {
          aggregations {
            access {
              buckets {
                doc_count
              }
            }
          }
        }
      }
    `,
  },
};

const Portal = Relay.createContainer(
  PortalComponent,
  PortalQuery
);

export default Portal;
