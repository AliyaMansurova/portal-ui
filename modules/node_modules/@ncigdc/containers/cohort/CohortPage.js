/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import SmartSearchLink from '@ncigdc/components/Links/SmartSearchLink';
import GenesTab from '@ncigdc/components/Cohort/GenesTab';
import MutationsTab from '@ncigdc/components/Cohort/MutationsTab';
import OncogridTab from '@ncigdc/components/Cohort/OncogridTab';

import CaseTable from './CaseTable';
import CaseAggregations from './CaseAggregations';

export type TProps = {
  viewer: {
    cohort: {
      cases: {
        aggregations: string,
        hits: string,
      },
      genes: {
        aggregations: string,
        hits: string,
      },
      ssms: {
        aggregations: string,
        hits: string,
      },
    },
  },
};

export const CohortPageComponent = (props: TProps) => {
  const setAutocomplete = quicksearch => props.relay.setVariables({
    quicksearch,
    runQuicksearch: !!quicksearch,
  });

  return (
    <SearchPage
      Facets={
        <TabbedLinks
          queryParam="facetTab"
          defaultIndex={0}
          links={[
            {
              text: 'Cases',
              component: (
                <CaseAggregations
                  aggregations={props.viewer.cohort.cases.aggregations}
                  hits={(props.viewer.cohort.cases || {}).hits || {}}
                  setAutocomplete={setAutocomplete}
                />
              ),
            },
            {
              text: 'Genes',
              component: <div>TODO</div>,
            },
            {
              text: 'Mutations',
              component: <div>TODO</div>,
            },
          ]}
        />
      }
      Results={
        <TabbedLinks
          queryParam="searchTableTab"
          defaultIndex={0}
          tabToolbar={
            <Row spacing="2rem" style={{ alignItems: 'center' }}>
              <SmartSearchLink>
                <Button leftIcon={<i className="fa fa-gears" />}>
                  Advanced Search
                </Button>
              </SmartSearchLink>
            </Row>
          }
          links={[
            {
              text: `Cases (${props.viewer.cohort.cases.hits.pagination.total})`,
              component: <CaseTable hits={props.viewer.cohort.cases.hits} />,
            },
            {
              text: `Genes (${props.viewer.cohort.genes.hits.pagination.total})`,
              component: (
                <GenesTab
                  totalNumCases={props.viewer.cohort.cases.hits.pagination.total}
                />
              ),
            },
            {
              text: `Mutations (${props.viewer.cohort.ssms.hits.pagination.total})`,
              component: (
                <MutationsTab
                  totalNumCases={props.viewer.cohort.cases.hits.pagination.total}
                />
              ),
            },
            {
              text: 'OncoGrid',
              component: (
                <OncogridTab />
              ),
            },
          ]}
        />
      }
    />
  );
};

export const CohortPageQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    genes_offset: null,
    genes_size: null,
    genes_sort: null,
    ssms_offset: null,
    ssms_size: null,
    ssms_sort: null,
    filters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        cohort {
          cases {
            aggregations(filters: $filters) {
              ${CaseAggregations.getFragment('aggregations')}
            }
            hits(first: $cases_size offset: $cases_offset, filters: $filters) {
              ${CaseTable.getFragment('hits')}
              pagination {
                total
              }
            }
          }
          genes {
            hits {
              pagination {
                total
              }
            }
          }
          ssms {
            hits {
              pagination {
                total
              }
            }
          }
        }
      }
    `,
  },
};

const CohortPage = Relay.createContainer(
  CohortPageComponent,
  CohortPageQuery
);

export default CohortPage;
