/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import SmartSearchLink from '@ncigdc/components/Links/SmartSearchLink';

export type TProps = {
  viewer: {
    cases: {
      aggregations: string,
      hits: string,
    },
    files: {
      aggregations: string,
      hits: string,
    },
  },
};

export const CohortPageComponent = (props: TProps) => (
  <SearchPage
    Facets={
      <TabbedLinks
        queryParam="facetTab"
        defaultIndex={0}
        links={[
          {
            text: 'Cases',
            component: (
              <div>TODO</div>
            ),
          },
          {
            text: 'Genes',
            component: <div>TODO</div>,
          },
          {
            text: 'Mutations',
            component: <div>TODO</div>,
          },
        ]}
      />
    }
    Results={
      <TabbedLinks
        queryParam="searchTableTab"
        defaultIndex={0}
        tabToolbar={
          <Row spacing="2rem" style={{ alignItems: 'center' }}>
            <SmartSearchLink>
              <Button leftIcon={<i className="fa fa-gears" />}>
                Advanced Search
              </Button>
            </SmartSearchLink>
          </Row>
        }
        links={[
          {
            text: `Cases (${props.viewer.cohort.cases.hits.pagination.total})`,
            component: 'TODO',
          },
          {
            text: `Genes (${props.viewer.cohort.genes.hits.pagination.total})`,
            component: 'TODO',
          },
          {
            text: `Mutations (${props.viewer.cohort.ssms.hits.pagination.total})`,
            component: 'TODO',
          },
          {
            text: 'OncoGrid',
            component: 'TODO',
          },
        ]}
      />
    }
  />
);

export const CohortPageQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    files_offset: null,
    files_size: null,
    files_sort: null,
    filters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        cohort {
          cases {
            hits {
              pagination {
                total
              }
            }
          }
          genes {
            hits {
              pagination {
                total
              }
            }
          }
          ssms {
            hits {
              pagination {
                total
              }
            }
          }
        }
      }
    `,
  },
};

const CohortPage = Relay.createContainer(
  CohortPageComponent,
  CohortPageQuery
);

export default CohortPage;
