/* @flow */

import React from 'react';
import Relay from 'react-relay';

import Home from '@ncigdc/components/Home';
import type { TBucket } from '@ncigdc/components/Aggregations/types';

export type TProps = {
  viewer: {
    cases: {
      hits: {
        pagination: {
          total: number,
        },
      },
    },
    files: {
      hits: {
        pagination: {
          total: number,
        },
      },
    },
    projects: {
      aggregations: {
        primary_site: { buckets: [TBucket] },
      },
      hits: {
        edges: Array<{|
          node: {|
           id: string,
           project_id: string,
           primary_site: string,
           summary: {
             case_count: number,
             file_count: number,
           },
         |},
       |}>,
       pagination: {
         total: number,
       },
      },
    },
  },
};

type THomePageComponent = (props: TProps) => React.Element<*>;
export const HomePageComponent: THomePageComponent = ({
  viewer = {
    cases: {
      hits: {
        pagination: {
          total: 0,
        },
      },
    },
    files: {
      hits: {
        pagination: {
          total: 0,
        },
      },
    },
    projects: {
      aggregations: {
        primary_site: { buckets: [] },
      },
      hits: {
        edges: [],
        pagination: {
          total: 0,
        },
      },
    },
  },
} = {}) => (
  <Home
    humanBodyData={viewer.projects.hits.edges.map(x => x.node)}
    projectsCountData={viewer.projects.hits}
    primarySitesCountData={viewer.projects.aggregations}
    casesCountData={viewer.cases.hits}
    filesCountData={viewer.files.hits}
  />
);

export const HomePageQuery = {
  initialVariables: {
    size: 1000,
    offset: 0,
    filters: null,
    sort: 'summary.case_count:desc',
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        projects {
          aggregations(filters: $filters) {
            primary_site {
              buckets {
                key
              }
            }
          }
          hits(first: $size offset: $offset, sort: $sort, filters: $filters) {
            edges {
              node {
                id
                project_id
                primary_site
                summary {
                  case_count
                  file_count
                }
              }
            }
            pagination {
              total
            }
          }
        }
        cases {
          hits(first: 0 offset: 0) {
            pagination {
              total
            }
          }
        }
        files {
          hits(first: 0 offset: 0) {
            pagination {
              total
            }
          }
        }
      }
    `,
  },
};

const HomePage = Relay.createContainer(
  HomePageComponent,
  HomePageQuery
);

export default HomePage;
