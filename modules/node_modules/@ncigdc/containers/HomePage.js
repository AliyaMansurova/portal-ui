/* @flow */

import React from 'react';
import Relay from 'react-relay';

import Home from '@ncigdc/components/Home';

import ProjectsCount from './ProjectsCount';
import PrimarySitesCount from './PrimarySitesCount';
import CasesCount from './CasesCount';
import FilesCount from './FilesCount';

export type TProps = {
  viewer: {
    cases: {
      hits: string,
    },
    files: {
      hits: string,
    },
    projects: {
      aggregations: string,
      hits: {
        edges: Array<{|
          node: {|
           id: string,
         |},
       |}>,
      },
    },
  },
};

export const HomePageComponent = (props: TProps) => (
  <Home
    humanBodyData={props.viewer.projects.hits.edges.map(x => x.node)}
    projectsCountData={props.viewer.projects.hits}
    primarySitesCountData={props.viewer.projects.aggregations}
    casesCountData={props.viewer.cases.hits}
    filesCountData={props.viewer.files.hits}
  />
);

export const HomePageQuery = {
  initialVariables: {
    size: 1000,
    offset: 0,
    filters: null,
    sort: 'summary.case_count:desc',
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        projects {
          aggregations(filters: $filters) {
            ${PrimarySitesCount.getFragment('aggregations')}
          }
          hits(first: $size offset: $offset, sort: $sort, filters: $filters) {
            edges {
              node {
                id
                project_id
                primary_site
                summary {
                  case_count
                  file_count
                }
              }
            }
            ${ProjectsCount.getFragment('hits')}
          }
        }
        cases {
          hits(first: $size offset: $offset, sort: $sort, filters: $filters) {
            ${CasesCount.getFragment('hits')}
          }
        }
        files {
          hits(first: $size offset: $offset, sort: $sort, filters: $filters) {
            ${FilesCount.getFragment('hits')}
          }
        }
      }
    `,
  },
};

const HomePage = Relay.createContainer(
  HomePageComponent,
  HomePageQuery
);

export default HomePage;
