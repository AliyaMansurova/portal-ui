/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import AnnotationsLink from '@ncigdc/components/Links/AnnotationsLink';
import SmartSearchLink from '@ncigdc/components/Links/SmartSearchLink';

import CaseTable from './CaseTable';
import CaseAggregations from './CaseAggregations';
import FileTable from './FileTable';
import FileAggregations from './FileAggregations';

export type TProps = {
  relay: Object,
  viewer: {
    repository: {
      cases: {
        aggregations: string,
        hits: string,
      },
      files: {
        aggregations: string,
        hits: string,
      },
    },
  },
};

export const RepositoryPageComponent = (props: TProps) => {
  const setAutocomplete = quicksearch => props.relay.setVariables({
    quicksearch,
    runQuicksearch: !!quicksearch,
  });

  return (
    <div>
      <SearchPage
        Facets={
          <TabbedLinks
            queryParam="facetTab"
            defaultIndex={0}
            links={[
              {
                text: 'Cases',
                component: (
                  <CaseAggregations
                    aggregations={props.viewer.repository.cases.aggregations}
                    hits={(props.viewer.repository.cases || {}).hits || {}}
                    setAutocomplete={setAutocomplete}
                  />
                ),
              },
              {
                text: 'Files',
                component: <FileAggregations aggregations={props.viewer.repository.files.aggregations} />,
              },
            ]}
          />
        }
        Results={
          <TabbedLinks
            queryParam="searchTableTab"
            defaultIndex={0}
            tabToolbar={
              <Row spacing="2rem" style={{ alignItems: 'center' }}>
                <SmartSearchLink>
                  <Button leftIcon={<i className="fa fa-gears" />}>
                    Advanced Search
                  </Button>
                </SmartSearchLink>
                <AnnotationsLink>
                  <Button leftIcon={<i className="fa fa-edit" />}>
                    Browse Annotations
                  </Button>
                </AnnotationsLink>
              </Row>
            }
            links={[
              {
                text: `Cases (${props.viewer.repository.cases.hits.pagination.total})`,
                component: <CaseTable hits={props.viewer.repository.cases.hits} />,
              },
              {
                text: `Files (${props.viewer.repository.files.hits.pagination.total})`,
                component: <FileTable hits={props.viewer.repository.files.hits} />,
              },
            ]}
          />
        }
      />
    </div>
  );
};

export const RepositoryPageQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    files_offset: null,
    files_size: null,
    files_sort: null,
    filters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        repository {
          cases {
            aggregations(filters: $filters) {
              ${CaseAggregations.getFragment('aggregations')}
            }
            hits(first: $cases_size offset: $cases_offset, filters: $filters) {
              ${CaseTable.getFragment('hits')}
              pagination {
                total
              }
            }
          }
          files {
            aggregations(filters: $filters) {
              ${FileAggregations.getFragment('aggregations')}
            }
            hits(first: $files_size offset: $files_offset, filters: $filters) {
              ${FileTable.getFragment('hits')}
              pagination {
                total
              }
            }
          }
        }
      }
    `,
  },
};

const RepositoryPage = Relay.createContainer(
  RepositoryPageComponent,
  RepositoryPageQuery
);

export default RepositoryPage;
