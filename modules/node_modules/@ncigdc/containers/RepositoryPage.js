/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import AnnotationsLink from '@ncigdc/components/Links/AnnotationsLink';

import CaseTable from './CaseTable';
import CaseAggregations from './CaseAggregations';
import FileTable from './FileTable';
import FileAggregations from './FileAggregations';

export type TProps = {
  viewer: {
    cases: {
      aggregations: string,
      hits: string,
    },
    files: {
      aggregations: string,
      hits: string,
    },
  },
};

export const RepositoryPageComponent = (props: TProps) => (
  <div>
    <SearchPage
      Facets={
        <TabbedLinks
          queryParam="facetTab"
          defaultIndex={0}
          links={[
            {
              text: 'cases',
              component: <CaseAggregations aggregations={props.viewer.cases.aggregations} />,
            },
            {
              text: 'files',
              component: <FileAggregations aggregations={props.viewer.files.aggregations} />,
            },
          ]}
        />
      }
      Results={
        <TabbedLinks
          queryParam="searchTableTab"
          defaultIndex={0}
          tabToolbar={
            <Row spacing="2rem" style={{ alignItems: 'center' }}>
              <Button leftIcon={<i className="fa fa-gears" />}>
                Advanced Search
              </Button>
              <AnnotationsLink>
                <Button leftIcon={<i className="fa fa-edit" />}>
                  Browse Annotations
                </Button>
              </AnnotationsLink>
            </Row>
          }
          links={[
            {
              text: 'cases',
              component: <CaseTable hits={props.viewer.cases.hits} />,
            },
            {
              text: 'files',
              component: <FileTable hits={props.viewer.files.hits} />,
            },
          ]}
        />
      }
    />
  </div>
);

export const RepositoryPageQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    files_offset: null,
    files_size: null,
    files_sort: null,
    filters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        cases {
          aggregations(filters: $filters) {
            ${CaseAggregations.getFragment('aggregations')}
          }
          hits(first: $cases_size offset: $cases_offset, filters: $filters) {
            ${CaseTable.getFragment('hits')}
          }
        }
        files {
          aggregations(filters: $filters) {
            ${FileAggregations.getFragment('aggregations')}
          }
          hits(first: $files_size offset: $files_offset, filters: $filters) {
            ${FileTable.getFragment('hits')}
          }
        }
      }
    `,
  },
};

const RepositoryPage = Relay.createContainer(
  RepositoryPageComponent,
  RepositoryPageQuery
);

export default RepositoryPage;
