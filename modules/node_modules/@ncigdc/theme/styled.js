// @flow

import { createElement } from 'react';
import { css } from 'glamor';
import { withTheme } from './index';
import validAttr from './utils/validAttr';
import domElements from './utils/domElements';

const createStyledComponent = el => style => (
  withTheme(({ ref, children, ...props }) => {
    const whiteListed = Object.entries(props).reduce((acc, [k, v]) => ({
      ...acc,
      ...(validAttr(k) ? { [k]: v } : {}),
    }), {});

    return createElement(
      el,
      {
        ref: node => (ref ? ref(node) : () => {}),
        className: `${
          css(Object.entries(style).reduce((acc, [k, v]) => ({
            ...acc,
            [k]: typeof v === 'function' ? v(props) : v,
          }), {}))
        }`,
        ...whiteListed,
      },
      children
    );
  })
);

const styled = domElements.reduce((acc, el) => ({
  ...acc,
  [el]: createStyledComponent(el),
}), {});


export default styled;
