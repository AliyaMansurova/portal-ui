// @flow
/* global __GDC_API__, __COMMIT_HASH__, __VERSION_TAG__, __COMMIT_LINK__ */

import { fetchApi } from '@ncigdc/utils/ajax';
import { handleActions } from 'redux-actions';
import packageJSON from './package.json';

const apiBaseUrl = 'https://github.com/NCI-GDC/gdcapi';

const red = 'color: rgb(173, 30, 30);';
const blue = 'color: rgb(89, 139, 214);';
const fontStyle = 'font-weight: bold;';

const logVersionInfo = ({
  uiVersionTag,
  uiCommitLink,
  apiCommit,
  apiVersion,
}) => {
  // UI info
  console.groupCollapsed(
    '%c★ UI Git Info\n=============',
    `${red};${fontStyle}`);

  console.info(
    `%cTag: %c${uiVersionTag}`,
    fontStyle, blue);

  console.info(
    `%cCommit Link: %c${uiCommitLink}`,
    fontStyle, blue);
  console.groupEnd();

  // API info
  console.groupCollapsed(
    '%c★ API Git Info\n==============',
    `${red};${fontStyle}`);

  console.info(
    `%cTag: %c${apiBaseUrl}/releases/tag/${apiVersion}`,
    fontStyle, blue);

  console.info(
    `%cCommit Link: %c${apiBaseUrl}/commit/${apiCommit}`,
    fontStyle, blue);
  console.groupEnd();
};

// Action Types

export const VERSION_INFO_SUCCESS = 'gdc/VERSION_INFO_SUCCESS';

// Action Creator

export function fetchApiVersionInfo(): Function {
  return async (dispatch, getState) => {
    const { tag, commit, data_release } = await fetchApi('status');
    const state = getState();

    const apiVersionInfo = {
      apiVersion: tag,
      apiCommit: commit,
      data_release,
    };

    logVersionInfo({
      ...state.versionInfo,
      ...apiVersionInfo,
    });

    dispatch({
      type: VERSION_INFO_SUCCESS,
      payload: apiVersionInfo,
    });
  };
}

// Reducer


// TODO: env vars
let initialState;
try {
  initialState = {
    uiVersion: packageJSON.version,
    uiVersionTag: __VERSION_TAG__,
    uiCommitHash: __COMMIT_HASH__,
    uiCommitLink: __COMMIT_LINK__,
    apiVersion: '',
    apiCommit: '',
    data_release: '',
  };
} catch (e) {
  initialState = {
    uiVersion: packageJSON.version,
    uiVersionTag: '',
    uiCommitHash: '',
    uiCommitLink: '',
    apiVersion: '',
    apiCommit: '',
    data_release: '',
  };
}

export default handleActions({
  [VERSION_INFO_SUCCESS]: (state, action) => ({
    ...state,
    ...action.payload,
  }),
}, initialState);
